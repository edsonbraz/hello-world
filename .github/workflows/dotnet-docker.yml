name: ".NET ‚Üí Build, Test & Docker"

on:
  workflow_call:
    inputs:
      client_id:
        description: 'Azure Client ID'
        type: string
        default: "50e5e7c2-da17-43e7-b05b-e582f17e5ac6"
      tenant_id:
        description: 'Azure Tenant ID'
        type: string
        default: "495a6f2f-e021-4750-b745-9b4282842206"
      subscription_id:
        description: 'Name of the Azure subscription to use'
        type: string
        default: '76656480-7374-4919-91eb-15e33417513e'
      container_registry:
        description: 'Name of the Azure Container Registry to use'
        type: string
      project_path:
        description: 'Path to your .NET solution or project'
        type: string
        default: '.'
      dotnet_version:
        description: 'Which .NET SDK version to install (e.g. 6.0.x, 7.0.x, 8.0.x, 9.0.x)'
        type: string
        default: '9.0.x'
      docker_build_context:
        description: 'Docker build context (e.g. ‚Äú.‚Äù)'
        type: string
        default: '.'
      dockerfile_path:
        description: 'Path to your Dockerfile (no default)'
        type: string
        required: true
      image_name:
        description: >
          Base name of your image (without registry).  
          If left blank, repo name will be used.
        type: string
        default: ''

jobs:

  version:
    name: üîñ Compute SemVer
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Git Semantic Version
        id: semver
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          major_pattern: "MAJOR"
          minor_pattern: "MINOR"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

  build:
    name: üõ†Ô∏è Build & Test
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK ${{ inputs.dotnet_version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - run: dotnet restore ${{ inputs.project_path }}
      - run: dotnet build   ${{ inputs.project_path }} --no-restore --configuration Release
      - run: dotnet test    ${{ inputs.project_path }} --no-build   --configuration Release --verbosity normal

  docker:
    name: üê≥ Build & Push Docker
    needs: [version, build]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.client_id }}
          tenant-id: ${{ inputs.tenant_id }}
          subscription-id: ${{ inputs.subscription_id }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show 
      
      - name: Azure ACR Login
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az acr login --name ${{ inputs.container_registry }} --expose-token

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker_build_context }}
          file:    ${{ inputs.dockerfile_path }}
          push:    true
          tags: |
            ${{ inputs.container_registry }}/${{ inputs.image_name || github.event.repository.name }}:latest
            ${{ inputs.container_registry }}/${{ inputs.image_name || github.event.repository.name }}:${{ needs.version.outputs.version }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
